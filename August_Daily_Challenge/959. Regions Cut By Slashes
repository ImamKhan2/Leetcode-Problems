class Solution {
    public int regionsBySlashes(String[] grid) {
        int n = grid.length;
        int size = 3 * n;
        boolean[][] visited = new boolean[size][size];

        int regions = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                // Expand each cell into a 3x3 grid
                if (grid[i].charAt(j) == '/') {
                    visited[3 * i][3 * j + 2] = true;
                    visited[3 * i + 1][3 * j + 1] = true;
                    visited[3 * i + 2][3 * j] = true;
                } else if (grid[i].charAt(j) == '\\') {
                    visited[3 * i][3 * j] = true;
                    visited[3 * i + 1][3 * j + 1] = true;
                    visited[3 * i + 2][3 * j + 2] = true;
                }
            }
        }

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (!visited[i][j]) {
                    regions++;
                    dfs(visited, i, j);
                }
            }
        }

        return regions;
    }

    private void dfs(boolean[][] visited, int i, int j) {
        int size = visited.length;

        // Boundary and visited check
        if (i < 0 || i >= size || j < 0 || j >= size || visited[i][j]) {
            return;
        }

        visited[i][j] = true;

        // Visit all 4 neighbors (up, down, left, right)
        dfs(visited, i - 1, j);
        dfs(visited, i + 1, j);
        dfs(visited, i, j - 1);
        dfs(visited, i, j + 1);
    }
}
