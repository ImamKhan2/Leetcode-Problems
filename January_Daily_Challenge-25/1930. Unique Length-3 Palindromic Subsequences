class Solution {
    public int countPalindromicSubsequence(String s) {
        // Step 1: Find all unique characters in the string `s`
        HashSet<Character> set = new HashSet<>();
        int n = s.length();
        for (int i = 0; i < n; i++) {
            set.add(s.charAt(i)); // Add each character to the set to ensure uniqueness
        }

        int count = 0; // Initialize the count of palindromic subsequences

        // Step 2: Iterate over each unique character in the set
        for (char ch : set) {
            int first = -1; // Variable to store the index of the first occurrence of `ch`
            int last = -1;  // Variable to store the index of the last occurrence of `ch`

            // Find the first and last occurrences of the character `ch` in the string
            for (int i = 0; i < n; i++) {
                if (ch == s.charAt(i)) {
                    if (first == -1) { // If first is not set, assign the current index
                        first = i;
                    }
                    last = i; // Update last occurrence each time `ch` is found
                }
            }

            // If the first and last occurrences are the same, skip this character
            // (No valid palindrome of the form "aba" can be created)
            if (first == last) continue;

            // Step 3: Collect all unique characters between the first and last occurrences of `ch`
            HashSet<Character> set1 = new HashSet<>();
            for (int i = first + 1; i < last; i++) {
                set1.add(s.charAt(i)); // Add intermediate characters to the set
            }

            // Step 4: Add the size of `set1` to the count
            // Each unique character in `set1` can form a distinct palindromic subsequence with `ch`
            count += set1.size();
        }

        // Step 5: Return the total count of distinct palindromic subsequences
        return count;
    }
}

// TC O(n)
// SC O(n)
