class Solution {
public int waysToSplitArray(int[] nums) {
    int n = nums.length;
    // Create a prefix sum array to store cumulative sums
    long[] prefSum = new long[n];
    prefSum[0] = nums[0];

    // Compute the prefix sum for the input array
    for (int i = 1; i < n; i++) {
        prefSum[i] = prefSum[i - 1] + nums[i];
    }

    int count = 0;
    // Iterate through possible split points (0 to n-2)
    for (int i = 0; i < n - 1; i++) {
        // Calculate the sum of the left part (0 to i) using the prefix sum array
        long leftSum = prefSum[i];
        // Calculate the sum of the right part (i+1 to n-1) as the total sum minus the left sum
        long rightSum = prefSum[n - 1] - prefSum[i];

        // If the left sum is greater than or equal to the right sum, increment the count
        if (leftSum >= rightSum) {
            count++;
        }
    }

    // Return the total count of valid splits
    return count;
}
}
// TC O(n)
// SC O(n)
