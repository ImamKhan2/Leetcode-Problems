class Solution {
    public int maxUniqueSplit(String s) {
        Set<String> used = new HashSet<>();
        return splitHelper(s, 0, used);
    }
    
    private int splitHelper(String s, int start, Set<String> used) {
        if (start == s.length()) {
            return 0;
        }
        
        int maxCount = 0;
        
        // Try forming every possible substring starting from 'start'
        for (int end = start + 1; end <= s.length(); end++) {
            String sub = s.substring(start, end);
            
            // If the substring is not already used
            if (!used.contains(sub)) {
                used.add(sub);  // Mark the substring as used
                // Recursively split the rest of the string and count
                int count = 1 + splitHelper(s, end, used);
                maxCount = Math.max(maxCount, count);  // Take the maximum count
                used.remove(sub);  // Backtrack to try other possibilities
            }
        }
        
        return maxCount;
    }
}

// TC O(2^n)
// SC O(n)
