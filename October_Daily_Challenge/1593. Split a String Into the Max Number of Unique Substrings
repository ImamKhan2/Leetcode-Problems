class Solution {
    public int maxUniqueSplit(String s) {
        // Create a set to store unique substrings
        Set<String> uniqueSubstrings = new HashSet<>();
        
        // StringBuilder to keep track of the current substring being built
        StringBuilder currentSubstring = new StringBuilder();

        // Iterate through each character in the input string `s`
        for(char ch : s.toCharArray()) {
            // Append the current character to the substring
            currentSubstring.append(ch);
            
            // If the current substring is not already in the set of unique substrings
            if (!uniqueSubstrings.contains(currentSubstring.toString())) {
                // Add the current substring to the set of unique substrings
                uniqueSubstrings.add(currentSubstring.toString());
                
                // Clear the current substring (start fresh for next potential substring)
                currentSubstring.setLength(0);
            }
        }
        
        // If there's any remaining substring left after the loop, add it to the set
        if (currentSubstring.length() > 0) {
            uniqueSubstrings.add(currentSubstring.toString());
        }
        
        // Return the total number of unique substrings found
        return uniqueSubstrings.size();
    }
}

// TC O(n)
// SC O(n)
