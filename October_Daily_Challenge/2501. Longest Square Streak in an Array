class Solution {
    public int longestSquareStreak(int[] nums) {
        int max = -1; // Variable to keep track of the longest square streak
        Map<Integer, Integer> map = new HashMap<>(); // Map to store each number and its streak count
        Arrays.sort(nums); // Sort the array to process smaller numbers first
        
        for (int i : nums) { // Loop through each number in the sorted array
            int root = (int) Math.sqrt(i); // Calculate the integer square root of the number

            // Check if the number is a perfect square and if its square root exists in the map
            if (root * root == i && map.containsKey(root)) {
                map.put(i, map.get(root) + 1); // Increment streak count by 1
                max = Math.max(map.get(i), max); // Update the maximum streak if necessary
            } else {
                map.put(i, 1); // If not a perfect square or root not in map, start a new streak count of 1
            }
        }
        return max; // Return the maximum streak length
    }
}

// TC O(nlogn)
// SC O(n)
