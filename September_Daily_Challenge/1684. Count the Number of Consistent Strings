class Solution {
    public int countConsistentStrings(String allowed, String[] words) {
        
        // Set<Character> set=new HashSet<>(); // put allowed character in set
        // int count=0;
        // for(char ch:allowed.toCharArray()){
        //     set.add(ch);
        // }
        // for(String word:words){ // traverse it each character  of each word
        //     for(int i=0;i<word.length();i++){
        //         if(!set.contains(word.charAt(i))) // if its not in set break
        //         break;
        //     }
        //     if(i==word.length())  // if i reaches the end means character is there then count++
        //     count++;
        // }
        // return count;

        // Method 2
        // Convert allowed string to a set of characters for quick lookup
        Set<Character> allowedSet = new HashSet<>();
        for (char c : allowed.toCharArray()) {
            allowedSet.add(c);
        }

        int count = 0;

        // Check each word for consistency
        for (String word : words) {
            boolean isConsistent = true;
            for (char c : word.toCharArray()) {
                if (!allowedSet.contains(c)) {
                    isConsistent = false;
                    break;
                }
            }
            if (isConsistent) {
                count++;
            }
        }

        return count;

    }
}

// TC O(n+m)
// SC O(1)
