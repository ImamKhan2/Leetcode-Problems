/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[][] spiralMatrix(int m, int n, ListNode head) {
        int[][] matrix = new int[m][n]; // Initialize the matrix with -1
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = -1;
            }
        }

        int top = 0, bottom = m - 1;
        int left = 0, right = n - 1;
        ListNode currentNode = head;

        while (top <= bottom && left <= right && currentNode != null) {
            // Traverse from left to right on the top row
            for (int i = left; i <= right && currentNode != null; i++) {
                matrix[top][i] = currentNode.val;
                currentNode = currentNode.next;
            }
            top++; // Move down to the next row

            // Traverse from top to bottom on the rightmost column
            for (int i = top; i <= bottom && currentNode != null; i++) {
                matrix[i][right] = currentNode.val;
                currentNode = currentNode.next;
            }
            right--; // Move left to the next column

            // Traverse from right to left on the bottom row
            for (int i = right; i >= left && currentNode != null; i--) {
                matrix[bottom][i] = currentNode.val;
                currentNode = currentNode.next;
            }
            bottom--; // Move up to the next row

            // Traverse from bottom to top on the leftmost column
            for (int i = bottom; i >= top && currentNode != null; i--) {
                matrix[i][left] = currentNode.val;
                currentNode = currentNode.next;
            }
            left++; // Move right to the next column
        }

        return matrix;
    }
}

// TC O(m*n)
// SC O(m*n)
