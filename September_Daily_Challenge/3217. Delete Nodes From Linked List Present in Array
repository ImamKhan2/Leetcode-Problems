/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode modifiedList(int[] nums, ListNode head) {
        // Create a HashSet from the nums array for O(1) lookup
        HashSet<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }

        // Dummy node to handle edge cases like deleting the head node
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        // Pointers to traverse the linked list
        ListNode current = head;
        ListNode prev = dummy;

        // Traverse the list
        while(current!=null){
            if(set.contains(current.val)){
                // Remove the current node by adjusting the previous node's next pointer
                prev.next = current.next;
            }else{
                // Move the previous pointer to the current node
                prev = current;
            }

            // Move the current pointer to the next node
            current = current.next;
        }
        // Return the modified list starting from the next of the dummy node
        return dummy.next;
    }
}

TC O(n+m)
SC O(n)
